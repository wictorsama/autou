#!/bin/bash

# AutoU - Script de Deploy Automatizado
# Este script facilita o deploy da aplica√ß√£o em diferentes plataformas

set -e  # Exit on any error

echo "üöÄ AutoU - Deploy Script"
echo "========================="

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Uso: ./deploy.sh [PLATAFORMA] [OP√á√ïES]"
    echo ""
    echo "Plataformas dispon√≠veis:"
    echo "  local     - Deploy local com Docker"
    echo "  render    - Deploy no Render.com"
    echo "  railway   - Deploy no Railway"
    echo "  heroku    - Deploy no Heroku"
    echo "  test      - Testa a aplica√ß√£o localmente"
    echo ""
    echo "Op√ß√µes:"
    echo "  --build   - Force rebuild da imagem Docker"
    echo "  --help    - Mostra esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  ./deploy.sh local"
    echo "  ./deploy.sh render"
    echo "  ./deploy.sh test"
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    echo "üîç Verificando depend√™ncias..."
    
    if ! command -v python3 &> /dev/null; then
        echo "‚ùå Python 3 n√£o encontrado. Instale Python 3.11+"
        exit 1
    fi
    
    if ! command -v pip &> /dev/null; then
        echo "‚ùå pip n√£o encontrado. Instale pip"
        exit 1
    fi
    
    echo "‚úÖ Depend√™ncias b√°sicas OK"
}

# Fun√ß√£o para deploy local
deploy_local() {
    echo "üê≥ Iniciando deploy local com Docker..."
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n√£o encontrado. Instale Docker primeiro."
        exit 1
    fi
    
    # Build da imagem
    if [[ "$1" == "--build" ]] || ! docker images | grep -q "autou"; then
        echo "üî® Building Docker image..."
        docker build -t autou .
    fi
    
    # Para containers existentes
    echo "üõë Parando containers existentes..."
    docker-compose down 2>/dev/null || true
    
    # Inicia com docker-compose
    echo "üöÄ Iniciando aplica√ß√£o..."
    docker-compose up -d
    
    echo "‚úÖ Deploy local conclu√≠do!"
    echo "üì± Aplica√ß√£o dispon√≠vel em: http://localhost:8000"
    echo "üìö Documenta√ß√£o da API: http://localhost:8000/docs"
    echo "üîç Logs: docker-compose logs -f"
}

# Fun√ß√£o para deploy no Render
deploy_render() {
    echo "‚òÅÔ∏è Preparando deploy para Render.com..."
    
    if [ ! -f "render.yaml" ]; then
        echo "‚ùå Arquivo render.yaml n√£o encontrado!"
        exit 1
    fi
    
    echo "‚úÖ Configura√ß√£o do Render encontrada (render.yaml)"
    echo "üìã Pr√≥ximos passos:"
    echo "   1. Fa√ßa push do c√≥digo para seu reposit√≥rio Git"
    echo "   2. Conecte o reposit√≥rio ao Render.com"
    echo "   3. Configure a vari√°vel OPENAI_API_KEY (opcional)"
    echo "   4. O deploy ser√° autom√°tico!"
    echo ""
    echo "üîó Acesse: https://render.com"
}

# Fun√ß√£o para deploy no Railway
deploy_railway() {
    echo "üöÇ Preparando deploy para Railway..."
    
    if ! command -v railway &> /dev/null; then
        echo "üì¶ Instalando Railway CLI..."
        npm install -g @railway/cli || {
            echo "‚ùå Erro ao instalar Railway CLI. Instale Node.js primeiro."
            exit 1
        }
    fi
    
    echo "üîë Fa√ßa login no Railway:"
    railway login
    
    echo "üöÄ Iniciando deploy..."
    railway up
    
    echo "‚úÖ Deploy no Railway conclu√≠do!"
}

# Fun√ß√£o para deploy no Heroku
deploy_heroku() {
    echo "üü£ Preparando deploy para Heroku..."
    
    if ! command -v heroku &> /dev/null; then
        echo "‚ùå Heroku CLI n√£o encontrado. Instale primeiro:"
        echo "   https://devcenter.heroku.com/articles/heroku-cli"
        exit 1
    fi
    
    echo "üîë Verificando login no Heroku..."
    heroku auth:whoami || {
        echo "üîë Fa√ßa login no Heroku:"
        heroku login
    }
    
    # Criar app se n√£o existir
    read -p "üìù Nome do app no Heroku (deixe vazio para gerar automaticamente): " app_name
    
    if [ -z "$app_name" ]; then
        heroku create
    else
        heroku create "$app_name" || echo "‚ö†Ô∏è App j√° existe, continuando..."
    fi
    
    # Configurar vari√°veis de ambiente
    echo "üîß Configurando vari√°veis de ambiente..."
    heroku config:set OPENAI_MODEL=gpt-4o-mini
    heroku config:set ZSL_MODEL=joeddav/xlm-roberta-large-xnli
    heroku config:set MAX_TEXT_CHARS=20000
    
    read -p "üîë Chave da OpenAI (opcional, pressione Enter para pular): " openai_key
    if [ ! -z "$openai_key" ]; then
        heroku config:set OPENAI_API_KEY="$openai_key"
    fi
    
    echo "üöÄ Fazendo deploy..."
    git push heroku main || git push heroku master
    
    echo "‚úÖ Deploy no Heroku conclu√≠do!"
    heroku open
}

# Fun√ß√£o para testar localmente
test_local() {
    echo "üß™ Testando aplica√ß√£o localmente..."
    
    check_dependencies
    
    # Instalar depend√™ncias se necess√°rio
    if [ ! -d "venv" ]; then
        echo "üì¶ Criando ambiente virtual..."
        python3 -m venv venv
    fi
    
    echo "üì¶ Ativando ambiente virtual e instalando depend√™ncias..."
    source venv/bin/activate 2>/dev/null || source venv/Scripts/activate
    pip install -r requirements.txt
    
    echo "üöÄ Iniciando servidor de desenvolvimento..."
    echo "üì± Aplica√ß√£o estar√° dispon√≠vel em: http://localhost:8000"
    echo "‚èπÔ∏è Pressione Ctrl+C para parar"
    
    uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
}

# Fun√ß√£o principal
main() {
    case "$1" in
        "local")
            deploy_local "$2"
            ;;
        "render")
            deploy_render
            ;;
        "railway")
            deploy_railway
            ;;
        "heroku")
            deploy_heroku
            ;;
        "test")
            test_local
            ;;
        "--help"|"help"|"")
            show_help
            ;;
        *)
            echo "‚ùå Plataforma '$1' n√£o reconhecida."
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"
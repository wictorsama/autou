#!/usr/bin/env python3
"""
Script de teste para validar aplica√ß√£o antes do deploy AWS
Testa todas as funcionalidades cr√≠ticas
"""

import os
import sys
import json
import time
import requests
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple

# Adicionar diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent.parent))

class DeploymentTester:
    """Testa funcionalidades antes do deploy"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.results = []
        self.server_process = None
    
    def log_result(self, test_name: str, success: bool, message: str = "", duration: float = 0):
        """Registra resultado do teste"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        duration_str = f" ({duration:.2f}s)" if duration > 0 else ""
        
        result = {
            'test': test_name,
            'success': success,
            'message': message,
            'duration': duration
        }
        
        self.results.append(result)
        print(f"{status} {test_name}{duration_str}")
        if message:
            print(f"    {message}")
    
    def start_server(self) -> bool:
        """Inicia servidor local para testes"""
        print("üöÄ Iniciando servidor local...")
        
        try:
            # Verificar se j√° est√° rodando
            response = requests.get(f"{self.base_url}/health", timeout=2)
            if response.status_code == 200:
                print("‚úÖ Servidor j√° est√° rodando")
                return True
        except:
            pass
        
        # Iniciar servidor
        try:
            self.server_process = subprocess.Popen([
                sys.executable, "-m", "uvicorn", 
                "app.main:app", 
                "--host", "0.0.0.0", 
                "--port", "8000"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # Aguardar servidor iniciar
            for i in range(30):  # 30 segundos timeout
                try:
                    response = requests.get(f"{self.base_url}/health", timeout=2)
                    if response.status_code == 200:
                        print("‚úÖ Servidor iniciado com sucesso")
                        return True
                except:
                    time.sleep(1)
            
            print("‚ùå Timeout ao iniciar servidor")
            return False
            
        except Exception as e:
            print(f"‚ùå Erro ao iniciar servidor: {e}")
            return False
    
    def stop_server(self):
        """Para servidor local"""
        if self.server_process:
            self.server_process.terminate()
            self.server_process.wait()
            print("üõë Servidor parado")
    
    def test_health_endpoint(self) -> bool:
        """Testa endpoint de health"""
        start_time = time.time()
        
        try:
            response = requests.get(f"{self.base_url}/health", timeout=10)
            duration = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                status = data.get('status')
                if status in ['healthy', 'ok']:  # Aceitar ambos os valores
                    self.log_result("Health Check", True, f"Status: {status}", duration)
                    return True
                else:
                    self.log_result("Health Check", False, f"Status inv√°lido: {status}", duration)
                    return False
            else:
                self.log_result("Health Check", False, f"Status code: {response.status_code}", duration)
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("Health Check", False, f"Erro: {str(e)}", duration)
            return False
    
    def test_static_files(self) -> bool:
        """Testa servir arquivos est√°ticos"""
        start_time = time.time()
        
        try:
            response = requests.get(f"{self.base_url}/", timeout=10)
            duration = time.time() - start_time
            
            if response.status_code == 200 and "AutoU" in response.text:
                self.log_result("Static Files", True, "Index.html carregado", duration)
                return True
            else:
                self.log_result("Static Files", False, f"Status: {response.status_code}", duration)
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("Static Files", False, f"Erro: {str(e)}", duration)
            return False
    
    def test_email_classification(self) -> bool:
        """Testa classifica√ß√£o de email"""
        start_time = time.time()
        
        test_text = "Reuni√£o importante amanh√£. Ol√°, precisamos nos reunir amanh√£ √†s 14h para discutir o projeto. Por favor, confirme sua presen√ßa."
        
        try:
            # Usar FormData como a aplica√ß√£o espera
            form_data = {'text': test_text}
            response = requests.post(
                f"{self.base_url}/api/process",
                data=form_data,
                timeout=30
            )
            duration = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                if 'category' in data and 'intent' in data:
                    category = data['category']
                    intent = data['intent']
                    self.log_result(
                        "Email Classification", 
                        True, 
                        f"Categoria: {category}, Inten√ß√£o: {intent}", 
                        duration
                    )
                    return True
                else:
                    self.log_result("Email Classification", False, "Resposta inv√°lida", duration)
                    return False
            else:
                self.log_result("Email Classification", False, f"Status: {response.status_code}", duration)
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("Email Classification", False, f"Erro: {str(e)}", duration)
            return False
    
    def test_suggestion_generation(self) -> bool:
        """Testa gera√ß√£o de sugest√µes (inclu√≠do no processo)"""
        start_time = time.time()
        
        test_text = "Preciso do status do chamado #12345. Quando ser√° resolvido?"
        
        try:
            # A sugest√£o √© gerada junto com a classifica√ß√£o no /api/process
            form_data = {'text': test_text}
            response = requests.post(
                f"{self.base_url}/api/process",
                data=form_data,
                timeout=30
            )
            duration = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                if 'suggested_reply' in data and data['suggested_reply']:
                    reply_length = len(data['suggested_reply'])
                    reply_source = data.get('reply_source', 'unknown')
                    self.log_result(
                        "Suggestion Generation", 
                        True, 
                        f"Resposta gerada ({reply_length} chars, fonte: {reply_source})", 
                        duration
                    )
                    return True
                else:
                    self.log_result("Suggestion Generation", False, "Nenhuma sugest√£o gerada", duration)
                    return False
            else:
                self.log_result("Suggestion Generation", False, f"Status: {response.status_code}", duration)
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("Suggestion Generation", False, f"Erro: {str(e)}", duration)
            return False
    
    def test_memory_usage(self) -> bool:
        """Testa uso de mem√≥ria atrav√©s do health endpoint"""
        start_time = time.time()
        
        try:
            response = requests.get(f"{self.base_url}/health", timeout=10)
            duration = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                memory_info = data.get('memory', {})
                memory_mb = memory_info.get('rss', 0)
                
                # Verificar se est√° dentro de limites aceit√°veis (< 2GB)
                if memory_mb < 2048:
                    self.log_result(
                        "Memory Usage", 
                        True, 
                        f"RSS: {memory_mb:.1f}MB", 
                        duration
                    )
                    return True
                else:
                    self.log_result(
                        "Memory Usage", 
                        False, 
                        f"Uso alto: {memory_mb:.1f}MB", 
                        duration
                    )
                    return False
            else:
                self.log_result("Memory Usage", False, f"Status: {response.status_code}", duration)
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("Memory Usage", False, f"Erro: {str(e)}", duration)
            return False
    
    def test_file_upload(self) -> bool:
        """Testa upload de arquivo"""
        start_time = time.time()
        
        # Criar arquivo de teste
        test_content = "Subject: Teste\nFrom: test@test.com\n\nEste √© um email de teste para classifica√ß√£o."
        
        try:
            files = {'file': ('test.txt', test_content, 'text/plain')}
            response = requests.post(
                f"{self.base_url}/api/process",
                files=files,
                timeout=20
            )
            duration = time.time() - start_time
            
            if response.status_code == 200:
                data = response.json()
                if 'category' in data and 'intent' in data:
                    category = data['category']
                    intent = data['intent']
                    self.log_result(
                        "File Upload", 
                        True, 
                        f"Arquivo processado: {category} - {intent}", 
                        duration
                    )
                    return True
                else:
                    self.log_result("File Upload", False, "Resposta inv√°lida", duration)
                    return False
            else:
                self.log_result("File Upload", False, f"Status: {response.status_code}", duration)
                return False
                
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("File Upload", False, f"Erro: {str(e)}", duration)
            return False
    
    def run_all_tests(self) -> bool:
        """Executa todos os testes"""
        print("üß™ AutoU Email Classifier - Testes de Deploy")
        print("=" * 50)
        
        # Iniciar servidor se necess√°rio
        if not self.start_server():
            return False
        
        try:
            # Lista de testes
            tests = [
                self.test_health_endpoint,
                self.test_static_files,
                self.test_memory_usage,
                self.test_email_classification,
                self.test_suggestion_generation,
                self.test_file_upload
            ]
            
            # Executar testes
            passed = 0
            total = len(tests)
            
            for test in tests:
                if test():
                    passed += 1
                time.sleep(1)  # Pausa entre testes
            
            # Relat√≥rio final
            print("\n" + "=" * 50)
            print(f"üìä Resultados: {passed}/{total} testes passaram")
            
            if passed == total:
                print("üéâ Todos os testes passaram! Pronto para deploy.")
                return True
            else:
                print(f"‚ö†Ô∏è {total - passed} testes falharam. Verifique os problemas antes do deploy.")
                return False
                
        finally:
            # Parar servidor se foi iniciado por este script
            if self.server_process:
                self.stop_server()
    
    def generate_report(self) -> str:
        """Gera relat√≥rio detalhado"""
        report = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'total_tests': len(self.results),
            'passed': sum(1 for r in self.results if r['success']),
            'failed': sum(1 for r in self.results if not r['success']),
            'results': self.results
        }
        
        return json.dumps(report, indent=2)

def main():
    """Fun√ß√£o principal"""
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('app/main.py'):
        print("‚ùå Execute este script no diret√≥rio raiz do projeto")
        sys.exit(1)
    
    # Executar testes
    tester = DeploymentTester()
    success = tester.run_all_tests()
    
    # Salvar relat√≥rio
    report = tester.generate_report()
    with open('deploy/test_report.json', 'w') as f:
        f.write(report)
    
    print(f"\nüìÑ Relat√≥rio salvo em: deploy/test_report.json")
    
    # Exit code
    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
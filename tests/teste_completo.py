#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste completo para validar todas as funcionalidades
antes do deploy no Render.
"""

import requests
import json
import os
from pathlib import Path

# Configura√ß√µes
BASE_URL = "http://localhost:8000"
EXEMPLOS_DIR = Path("../exemplos_teste")

# Exemplos esperados
EXPECTED_RESULTS = {
    "exemplo_status.txt": {
        "categoria": "Produtivo",
        "intencao": "Solicita√ß√£o de status ou acompanhamento",
        "keywords": ["status", "chamado"]
    },
    "exemplo_reuniao.txt": {
        "categoria": "Produtivo", 
        "intencao": "Agendamento de reuni√£o ou compromisso",
        "keywords": ["agendar", "reuni√£o", "disponibilidade"]
    },
    "exemplo_aprovacao.txt": {
        "categoria": "Produtivo",
        "intencao": "Aprova√ß√£o ou autoriza√ß√£o necess√°ria",
        "keywords": ["aprova√ß√£o", "autorizar"]
    },
    "exemplo_orcamento.txt": {
        "categoria": "Produtivo",
        "intencao": "Solicita√ß√£o de or√ßamento ou proposta",
        "keywords": ["or√ßamento", "proposta"]
    },
    "exemplo_convite.txt": {
        "categoria": "Improdutivo",
        "intencao": "Convite para evento ou treinamento",
        "keywords": ["convite", "workshop"]
    },
    "exemplo_notificacao.txt": {
        "categoria": "Improdutivo",
        "intencao": "Notifica√ß√£o autom√°tica do sistema",
        "keywords": ["notifica√ß√£o", "autom√°tica", "senha"]
    }
}

def test_health_endpoint():
    """Testa se o servidor est√° funcionando."""
    try:
        response = requests.get(f"{BASE_URL}/health")
        print(f"‚úÖ Health check: {response.status_code}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Health check falhou: {e}")
        return False

def test_classification(filename, content):
    """Testa a classifica√ß√£o de um email."""
    try:
        response = requests.post(
            f"{BASE_URL}/api/process",
            data={"text": content}
        )
        
        if response.status_code == 200:
            result = response.json()
            expected = EXPECTED_RESULTS.get(filename, {})
            
            print(f"\nüìß Testando: {filename}")
            print(f"   Resposta completa: {result}")
            print(f"   Categoria: {result.get('category')} (esperado: {expected.get('categoria')})")
            print(f"   Inten√ß√£o: {result.get('intent')} (esperado: {expected.get('intencao')})")
            print(f"   Confian√ßa: {result.get('category_score', 0):.2f}")
            
            # Verificar se a classifica√ß√£o est√° correta
            categoria_ok = result.get('category') == expected.get('categoria')
            intencao_ok = result.get('intent') == expected.get('intencao')
            
            if categoria_ok and intencao_ok:
                print(f"   ‚úÖ Classifica√ß√£o correta")
                return True
            else:
                print(f"   ‚ùå Classifica√ß√£o incorreta")
                return False
        else:
            print(f"‚ùå Erro na classifica√ß√£o de {filename}: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar {filename}: {e}")
        return False

def main():
    """Executa todos os testes."""
    print("üöÄ Iniciando testes completos da aplica√ß√£o...\n")
    
    # Teste 1: Health check
    if not test_health_endpoint():
        print("‚ùå Servidor n√£o est√° funcionando. Abortando testes.")
        return
    
    # Teste 2: Classifica√ß√µes
    total_tests = 0
    passed_tests = 0
    
    for filename in EXPECTED_RESULTS.keys():
        filepath = EXEMPLOS_DIR / filename
        if filepath.exists():
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            total_tests += 1
            if test_classification(filename, content):
                passed_tests += 1
        else:
            print(f"‚ö†Ô∏è  Arquivo n√£o encontrado: {filename}")
    
    # Resultado final
    print(f"\nüìä Resultado dos testes:")
    print(f"   Total: {total_tests}")
    print(f"   Passou: {passed_tests}")
    print(f"   Falhou: {total_tests - passed_tests}")
    print(f"   Taxa de sucesso: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("\nüéâ Todos os testes passaram! Aplica√ß√£o pronta para deploy.")
    else:
        print("\n‚ö†Ô∏è  Alguns testes falharam. Revisar antes do deploy.")

if __name__ == "__main__":
    main()
function emailApp(){
  return {
    rawText: "",
    file: null,
    loading: false,
    result: null,
    darkMode: localStorage.getItem('darkMode') === 'true',
    history: JSON.parse(localStorage.getItem('emailHistory') || '[]'),
    autoRefresh: localStorage.getItem('autoRefresh') === 'true',
    refreshTimeout: null,
    lastProcessedText: '',
    
    init() {
      // Aplicar dark mode no carregamento
      if (this.darkMode) {
        document.documentElement.classList.add('dark');
      }
      
      // Configurar auto-refresh se habilitado
      if (this.autoRefresh) {
        this.setupAutoRefresh();
      }
    },
    
    setupAutoRefresh() {
      // Observar mudanças no texto
      this.$watch('rawText', (newText) => {
        if (this.autoRefresh && newText && newText.length > 10 && newText !== this.lastProcessedText) {
          // Cancelar timeout anterior
          if (this.refreshTimeout) {
            clearTimeout(this.refreshTimeout);
          }
          
          // Definir novo timeout para processar após 2 segundos de inatividade
          this.refreshTimeout = setTimeout(() => {
            if (!this.loading && newText.trim()) {
              this.autoSubmit();
            }
          }, 2000);
        }
      });
    },
    
    toggleAutoRefresh() {
      this.autoRefresh = !this.autoRefresh;
      localStorage.setItem('autoRefresh', this.autoRefresh);
      
      if (this.autoRefresh) {
        this.setupAutoRefresh();
        this.showNotification('Auto-refresh ativado - resultados serão atualizados automaticamente', 'info');
      } else {
        if (this.refreshTimeout) {
          clearTimeout(this.refreshTimeout);
        }
        this.showNotification('Auto-refresh desativado', 'info');
      }
    },
    
    toggleDarkMode() {
      this.darkMode = !this.darkMode;
      localStorage.setItem('darkMode', this.darkMode);
      if (this.darkMode) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    },
    
    onFileChange(e){ 
      this.file = e.target.files[0] || null;
      if (this.file) {
        this.showNotification(`Arquivo selecionado: ${this.file.name}`, 'success');
      }
    },
    
    clearAll(){ 
      this.rawText = ""; 
      this.file = null; 
      this.result = null;
      this.showNotification('Campos limpos', 'info');
    },
    
    async autoSubmit() {
      // Versão silenciosa do submit para auto-refresh
      if (!this.rawText || this.rawText === this.lastProcessedText) {
        return;
      }
      
      this.loading = true;
      
      try {
        const form = new FormData();
        form.append('text', this.rawText);
        
        const res = await fetch('/api/process', { method:'POST', body: form });
        if(!res.ok){ 
          const e = await res.json(); 
          throw new Error(e.detail || 'Erro no processamento'); 
        }
        
        this.result = await res.json();
        this.lastProcessedText = this.rawText;
        
        // Salvar no histórico
        this.saveToHistory({
          text: this.rawText,
          result: this.result,
          timestamp: new Date().toISOString(),
          autoGenerated: true
        });
        
      } catch(err) {
        console.log('Auto-refresh error:', err.message);
      } finally {
        this.loading = false;
      }
    },
    
    async submit(){
      if (!this.rawText && !this.file) {
        this.showNotification('Por favor, insira um texto ou selecione um arquivo', 'error');
        return;
      }
      
      this.loading = true; 
      this.result = null;
      
      try{
        const form = new FormData();
        if(this.file){ form.append('file', this.file); }
        if(this.rawText && !this.file){ form.append('text', this.rawText); }
        
        const res = await fetch('/api/process', { method:'POST', body: form });
        if(!res.ok){ 
          const e = await res.json(); 
          throw new Error(e.detail || 'Erro no processamento'); 
        }
        
        this.result = await res.json();
        
        // Salvar no histórico
        this.saveToHistory({
          text: this.rawText || this.file?.name || '',
          result: this.result,
          timestamp: new Date().toISOString()
        });
        
        this.showNotification('Email classificado com sucesso!', 'success');
        
      }catch(err){
        this.showNotification(err.message, 'error');
      }finally{
        this.loading = false;
      }
    },
    
    async copyReply(){
      if(this.result?.suggested_reply){
        try {
          await navigator.clipboard.writeText(this.result.suggested_reply);
          this.showNotification('Resposta copiada para a área de transferência!', 'success');
        } catch (err) {
          this.showNotification('Erro ao copiar resposta', 'error');
        }
      }
    },
    
    saveToHistory(entry) {
      this.history.unshift(entry);
      // Manter apenas os últimos 10 itens
      if (this.history.length > 10) {
        this.history = this.history.slice(0, 10);
      }
      localStorage.setItem('emailHistory', JSON.stringify(this.history));
    },
    
    clearHistory() {
      this.history = [];
      localStorage.removeItem('emailHistory');
      this.showNotification('Histórico limpo', 'info');
    },
    
    loadFromHistory(entry) {
      this.rawText = entry.text;
      this.result = entry.result;
      this.showNotification('Item carregado do histórico', 'info');
    },
    
    showNotification(message, type = 'info') {
      // Criar elemento de notificação
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg shadow-lg text-white text-sm animate-fade-in ${
        type === 'success' ? 'bg-green-500' :
        type === 'error' ? 'bg-red-500' :
        type === 'warning' ? 'bg-yellow-500' :
        'bg-blue-500'
      }`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      // Remover após 3 segundos
      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 200);
      }, 3000);
    },
    
    getConfidenceColor(score) {
      if (score >= 0.8) return 'text-green-600';
      if (score >= 0.6) return 'text-yellow-600';
      return 'text-red-600';
    },
    
    formatTimestamp(timestamp) {
      return new Date(timestamp).toLocaleString('pt-BR');
    }
  }
}